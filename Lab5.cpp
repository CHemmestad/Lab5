/*
Caleb Hemmestad
C++ 2021
Due: 10/27/21
Lab 5 Number Guessing Game

Description: Write a number-guessing game in which the computer selects a random 
number in the range of 0 to 100, and users get a maximum of 20 attempts to guess it. At 
the end of each game, users should be told whether they won or lost, and then be asked 
whether they want to play again. When the user quits, the program should output the 
total number of wins and losses. To make the game more interesting, the program 
should vary the wording of the messages that it outputs for winning, for losing, and for 
asking for another game. Create 10 different messages for each of these cases, and use 
random numbers to choose among them. This application should use at least one Do-
While loop and at least one Switch statement. Write your C++ code using good style and 
documenting comments. You should use functions in your code as well. Your source 
code file should be called Lab5.cpp.
 */


#include <iostream>

//precondition : Need welcome message
//postcondition : Displays welcome message before you start playing
void welcome ( ) ; 

//precondition : Need a number generated by computer to guess
//postcondition : Picks a random number from 0 to 100 for player to guess
int random_number ( ) ;  

//precondition : Need to be allowed to guess multiple times and see if they won
//postcondition : Checks to see if you won or if you ran out of turns
int guessing_number ( int com , int &turns ) ; 

//precondition : Need messages to display if you won
//postcondition : Picks a random message out of ten to display
void win_messages ( ) ; 

//precondition : Need messages to display if you lose
//postcondition : Picks a random message out of ten to display
void loss_messages ( ) ; 

//precondition : Need to know if you want to play again
//postcondition : Checks to see if you want to play again and resets turns if yes
bool play_again ( int &turns ) ; 

//precondition : Need messages to display after you won or lost to play again
//postcondition : Picks a random message out of ten to display
void play_again_messages ( ) ; 

//precondition : Need to show the player how many times they lost or won
//postcondition : Shows how many times they won or lost after they quit the game
void wins_losses ( int wins , int losses ) ;


using namespace std ;

/*
					=============================================
												 BEGINNING OF MAIN
					=============================================
*/

int main(int argc, char **argv)

{
	system ( "clear" ) ; //Clearing the screen to keep it from getting cluttered
	
	bool again = true ; int turns = 20 ; //basic variable for counting
	int game ; //game = 0 (subtract turn and try gain) ; game = 1 (won) ; game = 2 (fail state)
	int wins = 0 ; int losses = 0 ; //basic variables for counting
	int com = 0 ; //com is the variable that stores the random number for the game
	
	welcome ( ) ; //Welcome message for starting the game
	
	while ( again ) {
		if ( !again ) { //checking to see if again is still true and ending the game if it isnt
			break ;
		}
		if ( turns == 20 ) { //Getting a new random number when you start a new game
			com = random_number ( ) ; //making com store random number for game
		}
		//USE CODE 1234 FOR AUTOMATIC LOSS
		//USE CODE 4321 FOR AUTOMATIC WIN
		game = guessing_number ( com , turns ) ; //guess the number and returning 0,1, or 2
		turns-- ; //subtracting from turns so you only have 20 guessing
		
		//fail safe for noninteger inputs
		if ( game == 2 ) {
			cout << "Invalid input caused fail state. Program ended." ;
			return 0 ;
		}
		if ( turns == 0 || game == 1 ) { //checking to see if the game is over
			if ( turns == 0 ) {
				loss_messages ( ) ; //if you ran out of turns then you lost and it displays message
				losses++ ; //adds to how many times you lost
			} else if ( game == 1 ) {
				win_messages ( ) ; //if you guessed the number then you won and it displays message
				wins++ ; //adds to how many times you won
			}
			play_again_messages ( ) ; //messages that ask if you want to play again
			again = play_again ( turns ) ; //checking to see if you want to play again
		}
	}
	wins_losses ( wins , losses ) ; //displaying how many times you won or lost if game is ended
	return 0 ;
}
/*
					=============================================
														   END OF MAIN
					=============================================
*/

//displaying how many times they won or loss
void wins_losses ( int wins , int losses ) {
	system ( "clear" ) ;
	cout << "You won " << wins << " times." << endl ;
	cout << "You lost " << losses << " times." << endl ;
}

//determining if guess is correct or not
int guessing_number ( int com , int &turns ) { // 0 = not correct ; 1 = won
	
	int guess ; 
	
	cout << endl << "Pick a number between 0 and 100 : " ;
	
	cin >> guess ; 
	
	if ( guess == 1234 ) {
		turns = 1 ;
		return 0 ;
	}
	if ( guess == 4321 ) {
		return 1 ;
	}
	
	if ( !cin ) {
		return 2 ;
	}
	
	//checking guesses to see if out of range, less/greater then com, or won
	if ( guess > 100 ) {
		cout << "Out of range!" << endl ;
		turns++ ; //giving back turn if they have an invalid input
		return 0 ;
	} else if ( guess < 0 ) {
		cout << "Out of range!" << endl ;
		turns++ ;
		return 0 ;
	} else if ( guess > com ) {
		cout << "Number is less than " << guess << endl ;
		return 0 ;
	} else if ( guess < com ) {
		cout << "Number is greater than " << guess << endl ;
		return 0 ;
	} else {
		return 1 ;
	}
}

//asking to play again
bool play_again ( int &turns ) {
	
	char again ;
	
	top :
	
	cin >> again ;
	
	if ( again == 'Y' || again == 'y' ) {
		turns = 20 ;
		system ( "clear" ) ;
		return true ;
	} else if ( again == 'N' || again == 'n' ) {
		return false ;
	}
	else {
		cout << "invalid input. Y/N : " ;
		goto top ;
	}
}

//displaying welcome message
void welcome ( ) {
	cout << "Welcome to the Number Guessing Game!" << endl ;
	cout << "Lets get started!" << endl << endl ;	
}

//generating random number
int random_number ( ) {
	
	int numberSize = 100 ;
	int max = 100 ;
	int com ;
	
	srand(time(NULL)) ;
	com = rand() %numberSize + 1 ;
	
	while ( com > max ) {
		srand(time(NULL)) ;
		com = rand() %numberSize + 1 ;
	}
	return com ;
}


//win messages
void win_messages ( ) {
	
	srand(time(NULL)) ;
	int x = rand() %10 + 1 ;
	
	cout << endl ;
	
	switch ( x ) {
		case 1 :
		cout << "You win!" << endl ;
		break ;
		case 2 :
		cout << "Winner winner chicken dinner!" << endl ;
		break ;
		case 3 :
		cout << "Ding ding ding! You won!" << endl ;
		break ;
		case 4 :
		cout << "YOU WIN!!!" << endl ;
		break ;
		case 5 :
		cout << "Way to go! You win." << endl ;
		break ;
		case 6 :
		cout << "Lucky guess. You win" << endl ;
		break ;
		case 7 :
		cout << "I guess you win." << endl ;
		break ;
		case 8 :
		cout << "Took you long enough. You win." << endl ;
		break ;
		case 9 :
		cout << "Ope. Looks like you won" << endl ;
		break ;
		case 10 :
		cout << "That's what I call a winner." << endl ;
		break ;
	}
}

//loss messages
void loss_messages ( ) {
	
	srand(time(NULL)) ;
	int x = rand() %10 + 1 ;
	
	cout << endl ;
	
	switch ( x ) {
		case 1 :
		cout << "Loser!" << endl ;
		break ;
		case 2 :
		cout << "You lose!" << endl ;
		break ;
		case 3 :
		cout << "Ran out of tries. You lose." << endl ;
		break ;
		case 4 :
		cout << "You're pretty bad at this. You lose." << endl ;
		break ;
		case 5 :
		cout << "It's not that hard but you still somehow managed to lose." << endl ;
		break ;
		case 6 :
		cout << "Loser! Loser! Loser!" << endl ;
		break ;
		case 7 :
		cout << "Better luck next time." << endl ;
		break ;
		case 8 :
		cout << "Woooooow! You actually lost." << endl ;
		break ;
		case 9 :
		cout << "Oof. That sucks. You lost." << endl ;
		break ;
		case 10 :
		cout << "You suck bro lol. Loser." << endl ;
		break ;
	}
}

//play again messages
void play_again_messages ( ) {

	srand(time(NULL)) ;
	int x = rand() %10 + 1 ;
	
	cout << endl ;
	
	switch ( x ) {
		case 1 :
		cout << "Play again? Y/N : " << endl ;
		break ;
		case 2 :
		cout << "Do you want to play again? Y/N : " << endl ;
		break ;
		case 3 :
		cout << "Try again? Y/N : " << endl ;
		break ;
		case 4 :
		cout << "Let's play again! Y/N : " << endl ;
		break ;
		case 5 :
		cout << "How about another go? Y/N : " << endl ;
		break ;
		case 6 :
		cout << "Let's go again! Y/N : " << endl ;
		break ;
		case 7 :
		cout << "Again? Y/N : " << endl ;
		break ;
		case 8 :
		cout << "Give it another shot! Y/N : " << endl ;
		break ;
		case 9 :
		cout << "This is fun! Again? Y/N : " << endl ;
		break ;
		case 10 :
		cout << "Try again if you want. Y/N : " << endl ;
		break ;
	}
}
